<?php
#ERROR_REPORTING( -1 );
#INI_SET( 'DISPLAY_ERRORS', 1 );
# This file was automatically generated by the MediaWiki 1.34.2
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}


## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "LOTR-TCG Wiki";
$wgMetaNamespace = "LOTR-TCG";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://localhost:1450";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL paths to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogos = [ '1x' => "$wgResourceBasePath/logo.png" ];

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "wiki@lotrtcgpc.net";
$wgPasswordSender = "wiki@lotrtcgpc.net";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "wiki_db";
$wgDBname = "wiki_db";
$wgDBuser = "root";
$wgDBpassword = "rootpass";

# MySQL specific settings
$wgDBprefix = "";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Shared database table
# This has no effect unless $wgSharedDB is also set.
$wgSharedTables[] = "actor";

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
$wgUseImageMagick = true;
$wgUseImageResize = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale. This should ideally be set to an English
## language locale so that the behaviour of C library functions will
## be consistent with typical installations. Use $wgLanguageCode to
## localise the wiki.
$wgShellLocale = "C.UTF-8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "en";

$wgSecretKey = "[generate a long-ass code to go here]";

# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "[generate a password here]";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";

# Path to the GNU diff3 utility. Used for conflict resolution.
$wgDiff3 = "/usr/bin/diff3";

# The following permissions were set based on your choice in the installer
$wgGroupPermissions['*']['edit'] = false;

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";


# End of automatically generated settings.
# Add more configuration options below.

#########################################
#  Start custom LotR-TCG wiki settings  #
#########################################

# Images may only be hotlinked if they match the whitelist regex, which is maintained as
# a restricted wiki page (and set to only allow lotrtcgwiki.com).
$wgAllowExternalImages = false;
$wgEnableImageWhitelist = true;

# Enables the use of the <img> tag.  By default external image hotlinking is intentionally
# left with features such as resize etc missing, to discourage the use of external hotlinking 
# (for reasons of potential privacy risks; the owner of the external image could track 
# viewership).  Since we're only hotlinking to legacy lotrtcgwiki image files, this privacy
# issue is not a concern.  
#$wgDeprecationReleaseLimit = '1.34';
#$wgAllowImageTag = true;


# Permits users to include their own custom CSS styling, which is most handy for dark-theme
# users or those with specific aesthetic requirements.
$wgAllowUserCss = true;

# By default, external links are all tagged in such a way that search engines are alerted
# to ignore the link when considering page rank.  As an anti-spam tactic this is unnecessary
# for us, and may be an own-goal, since all links to TLHH and Gemp will be marked as such
# unless we disable it here.
# The moderation queue will make this unnecessary regardless.
$wgNoFollowLinks = false;

# Alters the upload behavior to ensure all uploaded images are inserted directly into the
# /images folder and not into subfolders based on hash.
$wgHashedUploadDirectory = false;

# Enables upload of PDFs, SVGs, and TTFs; for CRDs, culture icons, and culture fonts
$wgFileExtensions = [ 'png', 'gif', 'jpg', 'jpeg', 'webp', 'pdf', 'svg', 'ttf'];
// $wgSVGConverter = 'ImageMagick';
// $wgSVGConverters = [
// 	'ImageMagick' =>
// 		'$path/convert $input -background "ffffff00" -fill black -thumbnail $widthx$height PNG:$output',
// 	];


# Basic Vector skin for desktop
wfLoadSkin( 'Vector' );

# These set Vector to work with mobile at the expense of the desktop version.
# Perhaps this can be conditionally enabled just on mobile using MobileFrontend...?
// $wgVectorResponsive = true;
// $wgVectorDefaultSkinVersion = '2';

# Skin candidates, these should be pared down to at most 2 (not counting dark variants)

wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'MinervaNeue' );
wfLoadExtension( 'MobileFrontend' );
$wgMFDefaultSkinClass = 'SkinMinerva';
wfLoadSkin( 'Tweeki' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Medik' );
wfLoadSkin( 'Foreground' );
wfLoadSkin( 'Refreshed' );
wfLoadSkin( 'Metrolook' );

# Uncomment one of these lines depending on which default you want to use.
$wgDefaultSkin = "vector";
#$wgDefaultSkin = "minerva";
#$wgDefaultSkin = "tweeki";
#$wgDefaultSkin = "citizen";

# DumpsOnDemand settings
$wgDumpsOnDemandUseDefaultJobQueue = true;
$wgDumpsOnDemandRequestLimit = 600; #10 minute cooldown



# Users may not edit articles without signing up and confirming their email.
$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['*']['writeapi'] = false;
#$wgEmailConfirmToEdit = true;

# Creates a simple "trusted" group which prevents the captcha from triggering for these users.
# These users also skip the moderation queue.
$wgGroupPermissions['trusted']['autoconfirmed'] = true;
$wgGroupPermissions['trusted']['editsemiprotected'] = true;
$wgGroupPermissions['trusted']['skipcaptcha'] = true;
$wgGroupPermissions['trusted']['apihighlimits'] = true;
$wgGroupPermissions['trusted']['skip-moderation'] = true;
$wgGroupPermissions['trusted']['dumpsondemand'] = true;

# Permits administrators to mass-edit pages using regex
$wgGroupPermissions['sysop']['masseditregex'] = true;
$wgGroupPermissions['sysop']['dumpsondemand'] = true;
$wgGroupPermissions['sysop']['dumpsondemand-limit-exempt'] = true;
$wgGroupPermissions['sysop']['dumprequestlog'] = true;


# Caching strategy settings.  This is set to use the database as the caching mechanism for most
# actions except for the actual HTML files themselves; those go in the cache folders below.
# The /cache and /cache/files folders will need to be manually created within the MW install directory
# and permissions granted to the MW user to access those folders.

$wgMainCacheType = CACHE_DB;
$wgEnableSidebarCache = true;
$wgCachePages = true;

$wgUseFileCache = true; 
$wgCacheDirectory  = "$IP/cache";
$wgFileCacheDirectory = "$IP/cache/files"; 

 


# Default extensions that are included in the base install but are not turned on by default

wfLoadExtension( 'InputBox' );
wfLoadExtension( 'VisualEditor' );
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'Cite' );
wfLoadExtension( 'Scribunto' ); # requires Lua if you are using an obscure OS (else it should be there)
$wgScribuntoDefaultEngine = 'luastandalone';
wfLoadExtension( 'SyntaxHighlight_GeSHi' ); # requires python 3
wfLoadExtension( 'CodeEditor' );
wfLoadExtension( 'ParserFunctions' );
$wgPFEnableStringFunctions = true; 
wfLoadExtension( 'PdfHandler' );
$wgPdfProcessor = '/usr/bin/gs'; 
$wgPdfPostProcessor = $wgImageMagickConvertCommand; // if defined via ImageMagick
$wgPdfInfo = '/usr/bin/pdfinfo'; 
$wgPdftoText = '/usr/bin/pdftotext';
$wgPdfHandlerDpi = 200;
wfLoadExtension( 'TemplateData' );
wfLoadExtension( 'WikiEditor' ); 
$wgScribuntoUseGeSHi = true;
$wgScribuntoUseCodeEditor = true;


# Extensions that are not installed; if these are not installed correctly, this will cause an error.
wfLoadExtension( 'CodeMirror' );
$wgDefaultUserOptions['usecodemirror'] = 1;
wfLoadExtension( 'Cargo' );
wfLoadExtension( 'PageForms' );
wfLoadExtension( 'GeoCrumbs' );
wfLoadExtension( 'Tabber' );
wfLoadExtension( 'MassEditRegex' );
wfLoadExtension( 'NativeSvgHandler' );
wfLoadExtension( 'SimpleBatchUpload' );
wfLoadExtension( 'DumpsOnDemand' );
wfLoadExtension( 'CheckUser' );
wfLoadExtension( 'TemplateStyles' );
wfLoadExtension( 'NewArticleTemplates' );


# Turn on the Captcha and use the QuestyCaptcha method, which replaces the image confirmation
# with a series of questions provided by us.
wfLoadExtensions([ 'ConfirmEdit', 'ConfirmEdit/QuestyCaptcha' ]);

# When users fail the 'click here' captcha, they will be presented with one of the following
# questions.  Answers are case-insensitive.
$wgCaptchaQuestions = [
	# full list of captcha questions ommitted for security reasons
	'How many kills does a Mumakil (elephant) count as?' => ['1', 'one']

];

# Turns off the captcha for signing up with a new account (as the signup captcha styling by
# default leaves a bit to be desired and would thus be an unnecessary roadblock to legit users)
# but turns it on for all other wiki actions (except edit, which is handled by the Moderation 
# plugin's queue; no need to have two such safeguards).  
# In my experience, this will result in new users being able to create somewhat less than 10
# of the below actions before the captcha checkmark stops letting them through automatically
# and will start challenging them with the above questions.  
$wgCaptchaTriggers['edit']          = false;
$wgCaptchaTriggers['create']        = true;
$wgCaptchaTriggers['createtalk']    = true;
$wgCaptchaTriggers['addurl']        = true;
$wgCaptchaTriggers['createaccount'] = false;
$wgCaptchaTriggers['badlogin']      = true;



# Uncomment these lines and the two at the very top of the page if you need per-page debug output.
# Naturally, make sure these are commented back out once the problem is found.
// $wgShowExceptionDetails  = true;
// $wgDebugToolbar  = true;
// $wgShowDebug  = true;
// $wgDevelopmentWarnings = true;







# This should be loaded last, after all other extensions and settings (there are certain 
# API hooks that this nukes and replaces, so if any are added afterwards they could potentially 
# be a route around the moderation queue).
wfLoadExtension( 'Moderation' );